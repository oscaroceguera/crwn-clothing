{"ast":null,"code":"import _slicedToArray from \"/Users/oscaroceguerabibriesca/Documents/Repos/examples/crwn-clothing/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/oscaroceguerabibriesca/Documents/Repos/examples/crwn-clothing/src/components/sign-in/sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\nimport './sign-in.styles.scss';\n\nconst SignIn = ({\n  emailSignInStart\n}) => {\n  const _useState = useState({\n    email: '',\n    password: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCredentials = _useState2[0],\n        setUserCredentials = _useState2[1];\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const email = userCredentials.email,\n          password = userCredentials.password;\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = event => {\n    const _event$target = event.target,\n          value = _event$target.value,\n          name = _event$target.name;\n    setUserCredentials({\n      [name]: value\n    });\n  };\n\n  const googleSignInStart = this.props.googleSignInStart;\n  return React.createElement(\"div\", {\n    className: \"sign-in\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"I already have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Sign in with your email and password\"), React.createElement(\"form\", {\n    onSubmit: this.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    label: \"email\",\n    value: this.state.email,\n    handleChange: this.handleChange,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    label: \"password\",\n    value: this.state.password,\n    handleChange: this.handleChange,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"buttons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Sign In\"), React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Sign In with Google\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/Users/oscaroceguerabibriesca/Documents/Repos/examples/crwn-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","email","password","userCredentials","setUserCredentials","handleSubmit","event","preventDefault","handleChange","target","value","name","props","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {connect} from 'react-redux'\n\nimport FormInput from '../form-input/form-input.component'\nimport CustomButton from '../custom-button/custom-button.component'\n\nimport {googleSignInStart, emailSignInStart} from '../../redux/user/user.actions'\n\nimport './sign-in.styles.scss'\n\nconst SignIn = ({ emailSignInStart} ) => {\n  const [userCredentials, setUserCredentials] = useState({ email: '', password: ''})\n\n  const handleSubmit = async event => {\n    event.preventDefault()\n    const { email, password } = userCredentials\n\n    emailSignInStart(email, password)\n  }\n\n  const handleChange = event => {\n    const {value, name} = event.target\n\n    setUserCredentials({\n      [name]: value\n    })\n  }\n\n    const { googleSignInStart } = this.props\n    return (\n      <div className='sign-in'>\n        <h2>I already have an account</h2>\n        <span>Sign in with your email and password</span>\n\n        <form onSubmit={this.handleSubmit}>\n          <FormInput\n            name='email'\n            type='email'\n            label='email'\n            value={this.state.email}\n            handleChange={this.handleChange}\n            required\n          />\n          <FormInput\n            name='password'\n            type='password'\n            label='password'\n            value={this.state.password}\n            handleChange={this.handleChange}\n            required\n          />\n          <div className='buttons'>\n            <CustomButton type='submit'>\n              Sign In\n            </CustomButton>\n            <CustomButton type='button' onClick={googleSignInStart} isGoogleSignIn>\n              Sign In with Google\n            </CustomButton>\n          </div>\n        </form>\n      </div>\n    )\n}\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({ email, password }))\n}) \nexport default connect(null, mapDispatchToProps)(SignIn)"]},"metadata":{},"sourceType":"module"}